{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tox OOP API IR This project is a Python script that parses the c-toxcore public headers and generates a JSON file describing an Intermediate Representation of the appropriate Object-Oriented API. Running Install requirements: pip install -r requirements.txt In the first use, you should run the script with --download-headers option or manually put the headers in a tox_headers directory in the root of the project: python main.py --download-headers After the headers are present in the tox_headers directory you can just run: python main.py Output is in the output directory. Building documentation Install requirements: pip install -r docs_requirements.txt Install custom plugin: pip install -e reference_link_fixer Build documentation (output in site directory): mkdocs build or serve it in a local server: mkdocs serve","title":"Home"},{"location":"#tox-oop-api-ir","text":"This project is a Python script that parses the c-toxcore public headers and generates a JSON file describing an Intermediate Representation of the appropriate Object-Oriented API.","title":"Tox OOP API IR"},{"location":"#running","text":"Install requirements: pip install -r requirements.txt In the first use, you should run the script with --download-headers option or manually put the headers in a tox_headers directory in the root of the project: python main.py --download-headers After the headers are present in the tox_headers directory you can just run: python main.py Output is in the output directory.","title":"Running"},{"location":"#building-documentation","text":"Install requirements: pip install -r docs_requirements.txt Install custom plugin: pip install -e reference_link_fixer Build documentation (output in site directory): mkdocs build or serve it in a local server: mkdocs serve","title":"Building documentation"},{"location":"reference/","text":"Reference This is the reference to the Intermediate Representation of the Tox Object-Oriented API. The format used to represent it is JSON. Below is the root of the JSON and you are welcome to expend any Type and read the reference of it. Root { \"ir_version\" : s tr i n g , \"tox_version\" : s tr i n g , \"enums\" : [ IREnum , ...] , \"exceptions\" : [ IRException , ...] , \"classes\" : [ IRClass , ...] } ir_version The version of this project of the form <major>.<minor>.<patch> . An increment of <major> signifies that API breaking changes have been added and an increment of the <minor> or <patch> signifies that changes have been added with backwards compatibility in mind. See Semantic Versioning for more details. E.g. \"1.1.0\" tox_version The version of c-toxcore that this IR is generated for. E.g. \"0.2.18\" enums List of generated enums. See IREnum . exceptions List of generated exceptions. See IRException . classes List of generated classes. See IRClass .","title":"Reference"},{"location":"reference/#reference","text":"This is the reference to the Intermediate Representation of the Tox Object-Oriented API. The format used to represent it is JSON. Below is the root of the JSON and you are welcome to expend any Type and read the reference of it. Root { \"ir_version\" : s tr i n g , \"tox_version\" : s tr i n g , \"enums\" : [ IREnum , ...] , \"exceptions\" : [ IRException , ...] , \"classes\" : [ IRClass , ...] } ir_version The version of this project of the form <major>.<minor>.<patch> . An increment of <major> signifies that API breaking changes have been added and an increment of the <minor> or <patch> signifies that changes have been added with backwards compatibility in mind. See Semantic Versioning for more details. E.g. \"1.1.0\" tox_version The version of c-toxcore that this IR is generated for. E.g. \"0.2.18\" enums List of generated enums. See IREnum . exceptions List of generated exceptions. See IRException . classes List of generated classes. See IRClass .","title":"Reference"},{"location":"reference/buffer_wrapper/","text":"IRBufferWrapper { \"object_name\" : \"IRBufferWrapper\" , \"buffer_param\" : IRParam , \"length_param\" : IRParam } This object wraps two parameters into one - a buffer and its length. This means that the API should require only one parameter - a certain array whose type is determined from the type field in the buffer_param object and under the hood the binding will extract the array into a pointer and a length and pass them to the C function. buffer_param The original parameter of the buffer. See IRParam . length_param The original parameter of the length of the buffer. See IRParam . Note The type and the name of the parameter to include in the API function should be the type and the name in the buffer_param .","title":"IRBufferWrapper"},{"location":"reference/buffer_wrapper/#irbufferwrapper","text":"{ \"object_name\" : \"IRBufferWrapper\" , \"buffer_param\" : IRParam , \"length_param\" : IRParam } This object wraps two parameters into one - a buffer and its length. This means that the API should require only one parameter - a certain array whose type is determined from the type field in the buffer_param object and under the hood the binding will extract the array into a pointer and a length and pass them to the C function. buffer_param The original parameter of the buffer. See IRParam . length_param The original parameter of the length of the buffer. See IRParam . Note The type and the name of the parameter to include in the API function should be the type and the name in the buffer_param .","title":"IRBufferWrapper"},{"location":"reference/class/","text":"IRClass { \"object_name\" : \"IRClass\" , \"name\" : s tr i n g , \"is_callback\" : boolea n , \"handle\" : IRNativeHandle | IRNumberHandle , \"default_init\" : IRFunction , \"properties\" : [ IRProperty , ...] , \"functions\" : [ IRFunction , ...] , \"inner_classes\" : [ IRClass , ...] } name The name of the class. E.g. \"Tox\" is_callback If true , this signifies that the class is a callback and should be represented as a lambda or functional interface depending on the language. The class will have only one function called callback . handle ( Nullable ) If not null , the handle signifies that the class is wrapping a certain handle (either a pointer or a number) that should exist as a private field of the class. The handle IR objects specify special handling of that handle. Possible types: IRNativeHandle or IRNumberHandle . default_init ( Nullable ) If not null , this is a function that represents a C function that should be called when the object is constructed. See IRFunction . properties The list of properties the class contains. See IRProperty . functions The list of functions the class contains. See IRFunction . inner_classes The list of inner classes (IRClass) the class contains. Each inner class should have access to its parents and their handles. This implies that a non-static function of an inner class should first pass to the corresponding C function every handle of its parents in order of hierarchy and then any other parameters of the function. Example: graph TD tox[Tox] --> friend[Friend]; friend --> file[\"File<br><br>send_chunk(...)\"]; When the send_chunk function is called the call of the C function should be as follows (handle access is simplified for representation): tox_file_send_chunk ( Tox :: handle , Friend :: handle , File :: handle , ...);","title":"IRClass"},{"location":"reference/class/#irclass","text":"{ \"object_name\" : \"IRClass\" , \"name\" : s tr i n g , \"is_callback\" : boolea n , \"handle\" : IRNativeHandle | IRNumberHandle , \"default_init\" : IRFunction , \"properties\" : [ IRProperty , ...] , \"functions\" : [ IRFunction , ...] , \"inner_classes\" : [ IRClass , ...] } name The name of the class. E.g. \"Tox\" is_callback If true , this signifies that the class is a callback and should be represented as a lambda or functional interface depending on the language. The class will have only one function called callback . handle ( Nullable ) If not null , the handle signifies that the class is wrapping a certain handle (either a pointer or a number) that should exist as a private field of the class. The handle IR objects specify special handling of that handle. Possible types: IRNativeHandle or IRNumberHandle . default_init ( Nullable ) If not null , this is a function that represents a C function that should be called when the object is constructed. See IRFunction . properties The list of properties the class contains. See IRProperty . functions The list of functions the class contains. See IRFunction . inner_classes The list of inner classes (IRClass) the class contains. Each inner class should have access to its parents and their handles. This implies that a non-static function of an inner class should first pass to the corresponding C function every handle of its parents in order of hierarchy and then any other parameters of the function. Example: graph TD tox[Tox] --> friend[Friend]; friend --> file[\"File<br><br>send_chunk(...)\"]; When the send_chunk function is called the call of the C function should be as follows (handle access is simplified for representation): tox_file_send_chunk ( Tox :: handle , Friend :: handle , File :: handle , ...);","title":"IRClass"},{"location":"reference/ctype/","text":"CType { \"object_name\" : \"CType\" , \"name\" : s tr i n g , \"is_pointer\" : boolea n } name The name of the C type without an asterisk (if it's a pointer). E.g. \"uint8_t\" is_pointer If the type is a pointer. Either true or false . Note The mutability of the type (i.e. const ) is stored in the mutable field in the containing IRType object.","title":"CType"},{"location":"reference/ctype/#ctype","text":"{ \"object_name\" : \"CType\" , \"name\" : s tr i n g , \"is_pointer\" : boolea n } name The name of the C type without an asterisk (if it's a pointer). E.g. \"uint8_t\" is_pointer If the type is a pointer. Either true or false . Note The mutability of the type (i.e. const ) is stored in the mutable field in the containing IRType object.","title":"CType"},{"location":"reference/enum/","text":"IREnum { \"object_name\" : \"IREnum\" , \"name\" : s tr i n g , \"cname\" : s tr i n g , \"values\" : [ IREnumValue , ...] } name The name of the enum. E.g. \"ToxUserStatus\" cname The original name of the enum that was present in the C header. E.g. \"Tox_User_Status\" values The list of enum values. See IREnumValue .","title":"IREnum"},{"location":"reference/enum/#irenum","text":"{ \"object_name\" : \"IREnum\" , \"name\" : s tr i n g , \"cname\" : s tr i n g , \"values\" : [ IREnumValue , ...] } name The name of the enum. E.g. \"ToxUserStatus\" cname The original name of the enum that was present in the C header. E.g. \"Tox_User_Status\" values The list of enum values. See IREnumValue .","title":"IREnum"},{"location":"reference/enum_value/","text":"IREnumValue { \"object_name\" : \"IREnumValue\" , \"name\" : s tr i n g , \"cname\" : s tr i n g , \"ordinal\" : i nt } name The name of the enum value. E.g. \"NONE\" cname The original name of the enum value that was present in the C header. E.g. \"TOX_USER_STATUS_NONE\" ordinal The ordinal of the enum value. This can be used to determine the order of the enum values as it is in the C header although the order in the values list of the enum should already be correct. E.g. 0","title":"IREnumValue"},{"location":"reference/enum_value/#irenumvalue","text":"{ \"object_name\" : \"IREnumValue\" , \"name\" : s tr i n g , \"cname\" : s tr i n g , \"ordinal\" : i nt } name The name of the enum value. E.g. \"NONE\" cname The original name of the enum value that was present in the C header. E.g. \"TOX_USER_STATUS_NONE\" ordinal The ordinal of the enum value. This can be used to determine the order of the enum values as it is in the C header although the order in the values list of the enum should already be correct. E.g. 0","title":"IREnumValue"},{"location":"reference/exception/","text":"IRException { \"object_name\" : \"IRException\" , \"name\" : s tr i n g , \"enum_name\" : s tr i n g } All error enums are replaced with exceptions containing the corresponding enum. This implicates that the error parameter in functions is removed. name The name of the exception. A proper suffix should be added to this name depending on the convention in the language. For example, if the value of this field is \"ToxOptionsNew\" , in JVM the name should be ToxOptionsNewException and in Python it should be ToxOptionsNewError . enum_name The name of the error enum contained inside the exception. E.g. \"ToxErrOptionsNew\" Note This is the name of the newly generated IREnum and not the original name in the C header.","title":"IRException"},{"location":"reference/exception/#irexception","text":"{ \"object_name\" : \"IRException\" , \"name\" : s tr i n g , \"enum_name\" : s tr i n g } All error enums are replaced with exceptions containing the corresponding enum. This implicates that the error parameter in functions is removed. name The name of the exception. A proper suffix should be added to this name depending on the convention in the language. For example, if the value of this field is \"ToxOptionsNew\" , in JVM the name should be ToxOptionsNewException and in Python it should be ToxOptionsNewError . enum_name The name of the error enum contained inside the exception. E.g. \"ToxErrOptionsNew\" Note This is the name of the newly generated IREnum and not the original name in the C header.","title":"IRException"},{"location":"reference/function/","text":"IRFunction { \"object_name\" : \"IRFunction\" , \"name\" : s tr i n g , \"cname\" : s tr i n g , \"return_type\" : IRReturnType , \"throws\" : s tr i n g , \"is_static\" : boolea n , \"params\" : [ IRParam | IRBufferWrapper , ...] } name The name of the function. E.g. \"bootstrap\" . cname The original name of the function. E.g. \"tox_bootstrap\" . return_type The return type spec of the function. See IRReturnType . throws ( Nullable ) The name of the exception to throw. The IRException object should be retrieved from the exceptions list in the root of the JSON by the name field. This indicates that the function has an additional parameter in the end expecting a pointer to the enum described in the enum_name field in the IRException object. The function should check if the error is not OK or if the returned value is a bool then that it's false (see replaced in return_type above). If it is, then the function should throw the exception. E.g. \"ToxOptionsNew\" . is_static If true then the parameters to the C function should be passed as usual from the binding function. If false then the parameters to the C function should first be the handles of the current class hierarchy and then any other parameters. See the inner_classes field in IRClass to see more information and an example. params The list of the parameters of the function. These can be represented by either IRParam or IRBufferWrapper .","title":"IRFunction"},{"location":"reference/function/#irfunction","text":"{ \"object_name\" : \"IRFunction\" , \"name\" : s tr i n g , \"cname\" : s tr i n g , \"return_type\" : IRReturnType , \"throws\" : s tr i n g , \"is_static\" : boolea n , \"params\" : [ IRParam | IRBufferWrapper , ...] } name The name of the function. E.g. \"bootstrap\" . cname The original name of the function. E.g. \"tox_bootstrap\" . return_type The return type spec of the function. See IRReturnType . throws ( Nullable ) The name of the exception to throw. The IRException object should be retrieved from the exceptions list in the root of the JSON by the name field. This indicates that the function has an additional parameter in the end expecting a pointer to the enum described in the enum_name field in the IRException object. The function should check if the error is not OK or if the returned value is a bool then that it's false (see replaced in return_type above). If it is, then the function should throw the exception. E.g. \"ToxOptionsNew\" . is_static If true then the parameters to the C function should be passed as usual from the binding function. If false then the parameters to the C function should first be the handles of the current class hierarchy and then any other parameters. See the inner_classes field in IRClass to see more information and an example. params The list of the parameters of the function. These can be represented by either IRParam or IRBufferWrapper .","title":"IRFunction"},{"location":"reference/native_handle/","text":"IRNativeHandle { \"object_name\" : \"IRNativeHandle\" , \"alloc_func\" : IRFunction , \"dealloc_func\" : IRFunction } alloc_func ( Nullable ) If not null , this function represents a C function that should be called to get a newly allocated handle. If null , then the object (and the handle) can be constructed only from other functions (and not the constructor). See IRFunction . dealloc_func This function represents a C function that should be called to release the memory of the resource(s) the handle is associated with. Must be called when the class object is released (or garbage collected) or earlier at the client's choice. See IRFunction .","title":"IRNativeHandle"},{"location":"reference/native_handle/#irnativehandle","text":"{ \"object_name\" : \"IRNativeHandle\" , \"alloc_func\" : IRFunction , \"dealloc_func\" : IRFunction } alloc_func ( Nullable ) If not null , this function represents a C function that should be called to get a newly allocated handle. If null , then the object (and the handle) can be constructed only from other functions (and not the constructor). See IRFunction . dealloc_func This function represents a C function that should be called to release the memory of the resource(s) the handle is associated with. Must be called when the class object is released (or garbage collected) or earlier at the client's choice. See IRFunction .","title":"IRNativeHandle"},{"location":"reference/number_handle/","text":"IRNumberHandle { \"object_name\" : \"IRNumberHandle\" , \"type\" : IRType } type The type of the number field that the handle should be stored in. See IRType .","title":"IRNumberHandle"},{"location":"reference/number_handle/#irnumberhandle","text":"{ \"object_name\" : \"IRNumberHandle\" , \"type\" : IRType } type The type of the number field that the handle should be stored in. See IRType .","title":"IRNumberHandle"},{"location":"reference/param/","text":"IRParam { \"object_name\" : \"IRParam\" , \"name\" : s tr i n g , \"type\" : IRType } This object represents a parameter in a function. name The name of the parameter. type The type of the parameter. See IRType .","title":"IRParam"},{"location":"reference/param/#irparam","text":"{ \"object_name\" : \"IRParam\" , \"name\" : s tr i n g , \"type\" : IRType } This object represents a parameter in a function. name The name of the parameter. type The type of the parameter. See IRType .","title":"IRParam"},{"location":"reference/property/","text":"IRProperty { \"object_name\" : \"IRProperty\" , \"name\" : s tr i n g , \"is_static\" : boolea n , \"getter\" : IRFunction , \"setter\" : IRFunction } name The name of the property. E.g. \"ipv6_enabled\" . is_static If the property is static. This is taken from the getter's is_static field. See the is_static field in IRFunction . getter The C function from which to get the value. The type of the property is determined from the return_type of the getter. See IRFunction . setter ( Nullable ) If not null , this is the C function that should be called to set the value, otherwise the property should be immutable. See IRFunction .","title":"IRProperty"},{"location":"reference/property/#irproperty","text":"{ \"object_name\" : \"IRProperty\" , \"name\" : s tr i n g , \"is_static\" : boolea n , \"getter\" : IRFunction , \"setter\" : IRFunction } name The name of the property. E.g. \"ipv6_enabled\" . is_static If the property is static. This is taken from the getter's is_static field. See the is_static field in IRFunction . getter The C function from which to get the value. The type of the property is determined from the return_type of the getter. See IRFunction . setter ( Nullable ) If not null , this is the C function that should be called to set the value, otherwise the property should be immutable. See IRFunction .","title":"IRProperty"},{"location":"reference/return_type/","text":"IRReturnType { \"object_name\" : \"IRReturnType\" , \"type\" : IRType , \"replaced\" : IRType , \"param_index\" : i nt } type The current return type. See IRType . replaced ( Nullable ) If not null , this signifies that the original return type (described in this field) was replaced with a different one (the one in type ) as part of an optimization. The current optimizations that would result in the replacement of the types are: Converting of buffer getters. Instead of passing a pointer to the buffer as a parameter to the function, the buffer will be the returned object. Removal of boolean returned when the function throws an exception. If a function throws an exception and it returns a bool indicating whether an error has occured, the bool will be converted to void as the catching of the exception is now the indication of an error. This is useful for example when the value in this field is a bool type. In this case the binding should check if the returned bool from the C function was false and if it was, then throw an exception, either from the throws field in IRFunction or a general one if null . See IRType . param_index ( Nullable ) If not null , this is used for passing the type to the C function in the correct parameter position as part of an optimization of buffer getter (see replaced above). E.g. 0","title":"IRReturnType"},{"location":"reference/return_type/#irreturntype","text":"{ \"object_name\" : \"IRReturnType\" , \"type\" : IRType , \"replaced\" : IRType , \"param_index\" : i nt } type The current return type. See IRType . replaced ( Nullable ) If not null , this signifies that the original return type (described in this field) was replaced with a different one (the one in type ) as part of an optimization. The current optimizations that would result in the replacement of the types are: Converting of buffer getters. Instead of passing a pointer to the buffer as a parameter to the function, the buffer will be the returned object. Removal of boolean returned when the function throws an exception. If a function throws an exception and it returns a bool indicating whether an error has occured, the bool will be converted to void as the catching of the exception is now the indication of an error. This is useful for example when the value in this field is a bool type. In this case the binding should check if the returned bool from the C function was false and if it was, then throw an exception, either from the throws field in IRFunction or a general one if null . See IRType . param_index ( Nullable ) If not null , this is used for passing the type to the C function in the correct parameter position as part of an optimization of buffer getter (see replaced above). E.g. 0","title":"IRReturnType"},{"location":"reference/type/","text":"IRType { \"object_name\" : \"IRType\" , \"name\" : s tr i n g , \"mutable\" : boolea n , \"is_array\" : boolea n , \"acts_as_string\" : boolea n , \"contains_number_handle\" : boolea n , \"ctype\" : CType , \"get_size_func\" : IRFunction , \"set_size_func\" : IRFunction } name The name of the type modified and mapped from the C type. The current mapping is as follows (the original C type in the left and the one stored in this field to the right): uint8_t -> byte uint16_t -> ushort uint32_t -> uint uint64_t -> ulong size_t -> ulong char -> char bool -> bool void -> void If the type doesn't have a corresponding mapping the underscores in the name are removed (if any) and the first letter of each word is uppercased forming a PascalCase. mutable If the value of the variable can be changed after assignment. Either true or false . is_array If the type is an array. If the type is primitive (has been mapped using the above mapping) and the is_pointer field of the ctype object is true this will be true , otherwise false . acts_as_string This will be true if the type is a part of an IRParam and it meets the following requirements: The name of the containing IRParam contains one of the following strings: [ \"name\" , \"title\" , \"message\" ] . The name of the ctype object equals to uint8_t . The is_array field is true . This signifies that the front-facing API should treat this type as a string and perform the neccessary casts to an array of bytes ( uint8_t ) and vice versa. contains_number_handle If this is true , this represents that the original type was a number handle and has been replaced by a wrapper class - specified in the name field. If this is a parameter to a function, the API should get an instance of the wrapper class instead of a number and under the hood pass the number handle stored in the class to the C function. If it's a return type, then the binding should get the number handle returned by the C function, wrap it in a new instance of the wrapper class and return it instead. ctype Stores the original information of the C type that was present in the C header (except the mutability of it which is stored here in the mutable field). This is important for the C part of the binding. See CType . get_size_func ( Nullable ) If not null , this is a C function (stored in the cname ) that should be called first to know how much memory to allocate for this type. The binding should prevent from the client the necessity of calling this function by doing this already and returning the buffer without the overhead of its size. In typical high level languages, the size of the array will be stored automatically in the object of the array. See IRFunction . set_size_func ( Nullable ) If not null , this is a C function (stored in the cname ) that should be called (with the size of this buffer) after invoking the associated function of this type. See IRFunction .","title":"IRType"},{"location":"reference/type/#irtype","text":"{ \"object_name\" : \"IRType\" , \"name\" : s tr i n g , \"mutable\" : boolea n , \"is_array\" : boolea n , \"acts_as_string\" : boolea n , \"contains_number_handle\" : boolea n , \"ctype\" : CType , \"get_size_func\" : IRFunction , \"set_size_func\" : IRFunction } name The name of the type modified and mapped from the C type. The current mapping is as follows (the original C type in the left and the one stored in this field to the right): uint8_t -> byte uint16_t -> ushort uint32_t -> uint uint64_t -> ulong size_t -> ulong char -> char bool -> bool void -> void If the type doesn't have a corresponding mapping the underscores in the name are removed (if any) and the first letter of each word is uppercased forming a PascalCase. mutable If the value of the variable can be changed after assignment. Either true or false . is_array If the type is an array. If the type is primitive (has been mapped using the above mapping) and the is_pointer field of the ctype object is true this will be true , otherwise false . acts_as_string This will be true if the type is a part of an IRParam and it meets the following requirements: The name of the containing IRParam contains one of the following strings: [ \"name\" , \"title\" , \"message\" ] . The name of the ctype object equals to uint8_t . The is_array field is true . This signifies that the front-facing API should treat this type as a string and perform the neccessary casts to an array of bytes ( uint8_t ) and vice versa. contains_number_handle If this is true , this represents that the original type was a number handle and has been replaced by a wrapper class - specified in the name field. If this is a parameter to a function, the API should get an instance of the wrapper class instead of a number and under the hood pass the number handle stored in the class to the C function. If it's a return type, then the binding should get the number handle returned by the C function, wrap it in a new instance of the wrapper class and return it instead. ctype Stores the original information of the C type that was present in the C header (except the mutability of it which is stored here in the mutable field). This is important for the C part of the binding. See CType . get_size_func ( Nullable ) If not null , this is a C function (stored in the cname ) that should be called first to know how much memory to allocate for this type. The binding should prevent from the client the necessity of calling this function by doing this already and returning the buffer without the overhead of its size. In typical high level languages, the size of the array will be stored automatically in the object of the array. See IRFunction . set_size_func ( Nullable ) If not null , this is a C function (stored in the cname ) that should be called (with the size of this buffer) after invoking the associated function of this type. See IRFunction .","title":"IRType"}]}